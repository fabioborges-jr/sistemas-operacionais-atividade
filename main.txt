import java.util.Arrays;
import java.util.Random;

public class MemoryManagement {
    private static String[] memory = new String[64];
    private static int nameProcess = 1;
    private static int lastProcessIndex = -1;
    private static final int memorySize = (int) Math.pow(2, 6);

    static {
        Arrays.fill(memory, "0");
    }

    static class Process {
        String name;
        int size;

        Process(String name) {
            this.name = name;
            this.size = new Random().nextInt(memorySize / 4) + 1;
        }

        void apresentar() {
            System.out.println("PROCESSO " + this.name + " CRIADO E SEU TAMANHO É DE " + this.size);
        }

        void firstFit() {
            int initialFreeBlockSpace = -1;
            int countFreeBlock = 0;

            for (int i = 0; i < memory.length; i++) {
                if (memory[i].equals("0")) {
                    if (initialFreeBlockSpace == -1) {
                        initialFreeBlockSpace = i;
                    }
                    countFreeBlock += 1;

                    if (countFreeBlock >= this.size) {
                        for (int j = initialFreeBlockSpace; j < initialFreeBlockSpace + this.size; j++) {
                            memory[j] = this.name;
                        }
                        lastProcessIndex = i;
                        System.out.println("PROCESSO " + this.name + " INSERIDO COM FIRST-FIT");
                        System.out.println(Arrays.toString(memory));
                        return;
                    }
                } else {
                    initialFreeBlockSpace = -1;
                    countFreeBlock = 0;
                }
            }

            System.out.println("NÃO FOI POSSÍVEL ALOCAR O PROCESSO " + this.name + " COM O MÉTODO FIRST-FIT");
        }

        void nextFit() {
            System.out.println("ÚLTIMO PROCESSO INSERIDO FOI NO INDEX " + lastProcessIndex);
            int countFreeBlock = 0;

            for (int i = lastProcessIndex + 1; i < memory.length; i++) {
                if (memory[i].equals("0")) {
                    countFreeBlock += 1;

                    if (countFreeBlock >= this.size) {
                        for (int j = i - this.size + 1; j <= i; j++) {
                            memory[j] = this.name;
                        }
                        lastProcessIndex = i;
                        System.out.println("PROCESSO " + this.name + " INSERIDO COM NEXT-FIT");
                        System.out.println(Arrays.toString(memory));
                        return;
                    }
                } else {
                    System.out.println("NÃO FOI POSSÍVEL UTILIZAR O NEXT-FIT PARA O PROCESSO " + this.name + ", PROCURANDO NO INÍCIO DA MEMÓRIA");
                    this.firstFit();
                    countFreeBlock = 0;
                    return;
                }
            }

            System.out.println("NÃO FOI POSSÍVEL ALOCAR O PROCESSO " + this.name + " COM O PROCESSO NEXT-FIT");
        }

        void bestFit() {
            int bestBlockIndex = -1;
            int bestBlockSize = memory.length + 1;

            int currentBlockIndex = -1;
            int currentBlockSize = 0;

            for (int i = 0; i < memory.length; i++) {
                if (memory[i].equals("0")) {
                    if (currentBlockIndex == -1) {
                        currentBlockIndex = i;
                    }
                    currentBlockSize += 1;
                } else {
                    if (currentBlockSize >= this.size && currentBlockSize < bestBlockSize) {
                        bestBlockIndex = currentBlockIndex;
                        bestBlockSize = currentBlockSize;
                    }
                    currentBlockIndex = -1;
                    currentBlockSize = 0;
                }
            }

            if (currentBlockSize >= this.size && currentBlockSize < bestBlockSize) {
                bestBlockIndex = currentBlockIndex;
                bestBlockSize = currentBlockSize;
            }

            if (bestBlockIndex != -1) {
                for (int j = bestBlockIndex; j < bestBlockIndex + this.size; j++) {
                    memory[j] = this.name;
                }
                lastProcessIndex = bestBlockIndex + this.size - 1;
                System.out.println("PROCESSO " + this.name + " INSERIDO COM BEST-FIT");
                System.out.println(Arrays.toString(memory));
                return;
            }

            System.out.println("NÃO FOI POSSÍVEL ALOCAR O PROCESSO " + this.name + " COM O PROCESSO BEST-FIT");
        }

        void worstFit() {
            int worstBlockIndex = -1;
            int worstBlockSize = 0;

            int currentBlockIndex = -1;
            int currentBlockSize = 0;

            for (int i = 0; i < memory.length; i++) {
                if (memory[i].equals("0")) {
                    if (currentBlockIndex == -1) {
                        currentBlockIndex = i;
                    }
                    currentBlockSize += 1;
                } else {
                    if (currentBlockSize > worstBlockSize && currentBlockSize >= this.size) {
                        worstBlockIndex = currentBlockIndex;
                        worstBlockSize = currentBlockSize;
                    }
                    currentBlockIndex = -1;
                    currentBlockSize = 0;
                }
            }

            if (currentBlockSize > worstBlockSize && currentBlockSize >= this.size) {
                worstBlockIndex = currentBlockIndex;
                worstBlockSize = currentBlockSize;
            }

            if (worstBlockIndex != -1) {
                for (int j = worstBlockIndex; j < worstBlockIndex + this.size; j++) {
                    memory[j] = this.name;
                }
                lastProcessIndex = worstBlockIndex + this.size - 1;
                System.out.println("PROCESSO " + this.name + " INSERIDO COM WORST-FIT");
                System.out.println(Arrays.toString(memory));
                return;
            }

            System.out.println("NÃO FOI POSSÍVEL ALOCAR O PROCESSO " + this.name + " COM O PROCESSO WORST-FIT");
        }
    }

    static void removeProcess(String processName) {
        for (int i = 0; i < memory.length; i++) {
            if (memory[i].equals(processName)) {
                memory[i] = "0";
            }
        }
        System.out.println("PROCESSO " + processName + " REMOVIDO.");
        System.out.println(Arrays.toString(memory));
    }

    public static void main(String[] args) {
        Process process1 = new Process("P1");
        process1.apresentar();
        process1.firstFit();

        Process process2 = new Process("P2");
        process2.apresentar();
        process2.nextFit();

        Process process3 = new Process("P3");
        process3.apresentar();
        process3.bestFit();

        Process process4 = new Process("P4");
        process4.apresentar();
        process4.worstFit();

        removeProcess("P3");

        Process process5 = new Process("P5");
        process5.apresentar();
        process5.firstFit();

        removeProcess("P1");

        Process process6 = new Process("P6");
        process6.apresentar();
        process6.nextFit();

        Process process7 = new Process("P7");
        process7.apresentar();
        process7.bestFit();

        removeProcess("P2");

        Process process8 = new Process("P8");
        process8.apresentar();
        process8.worstFit();

        removeProcess("P5");

        Process process9 = new Process("P9");
        process9.apresentar();
        process9.firstFit();

        Process process10 = new Process("P10");
        process10.apresentar();
        process10.nextFit();

        Process process11 = new Process("P11");
        process11.apresentar();
        process11.bestFit();

        Process process12 = new Process("P12");
        process12.apresentar();
        process12.worstFit();

        removeProcess("P6");
    }
}


